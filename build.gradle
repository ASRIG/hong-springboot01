// 플러그인 의존성 관리를 위한 설정.
buildscript{
    // ext :: 빌드그래들에서 사용하는 전역변수를 설정하겠다.
    ext{
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'com.hong.book'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

// 각종 의존성(라이브러리)들을 어떤 원격 저장소에서 받을지를 정함.
repositories {
    mavenCentral()
    jcenter()
}

// 프로젝트 개발에 필요한 의존성들을 선언하는 곳.
// 이곳에서는 특정 버전을 명시하면 안된다. 버전을 명시하지 않아야만 맨 위에 작성한 버전을 따라가게 된다.
//      이렇게 관리함으로써, 각 라이브러리들의 버전 관리가 한곳에 집중되고 버전 충돌 문제도 해결되어 간편하게 개발할 수 있다.
dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok')
    // 스프링 부트용 Spring Data Jpa 추상화 라이브러리.
            // 스프링 부트버전에 맞춰 자동으로 JPA관련 라이브러리들의 버전을 관리해준다.
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    // 인메모리형 관계형 데이터베이스. 별도의 설치없이 프로젝트 의존성만으로 관리가능.
    // 메모리에서 실행되기 떄문에 애플리케이션을 재시작할 때마다 초기화된다는 것을 이용해 테스트용도로 많이 사용된다.
    compile('com.h2database:h2')

    // 머스테치를 이용할 수 있도록 머스타치 의존성을 추가. (스프링에서 공식 지원하는 템플릿 엔진)
    compile('org.springframework.boot:spring-boot-starter-mustache')

    // 스프링 시큐리티 설정.
    // 소셜 로그인 등 클라이언트 입장에서 소셜 기능 구현 시 필요한 의존성.
    compile('org.springframework.boot:spring-boot-starter-oauth2-client')

    // 세션 저장소로 데이터베이스를 사용하기. (My-SQL과 같은 데이터베이스를 세션저장소로 사용)
    compile('org.springframework.session:spring-session-jdbc')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}
